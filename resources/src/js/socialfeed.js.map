{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/mustache/mustache.js","socialfeed.js","src/js/socialfeed.js","src/js/utils/ApiUtils.js","src/js/utils/Utils.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","global","factory","nodeName","define","amd","Mustache","this","mustache","isFunction","object","typeStr","obj","isArray","escapeRegExp","string","replace","hasProperty","propName","testRegExp","re","regExpTest","isWhitespace","nonSpaceRe","escapeHtml","String","entityMap","parseTemplate","template","tags","stripSpace","hasTag","nonSpace","spaces","tokens","pop","compileTags","tagsToCompile","split","spaceRe","openingTagRe","RegExp","closingTagRe","closingCurlyRe","sections","start","type","value","chr","token","openSection","scanner","Scanner","eos","pos","scanUntil","valueLength","charAt","push","scan","tagRe","whiteRe","equalsRe","curlyRe","nestTokens","squashTokens","lastToken","squashedTokens","numTokens","section","nestedTokens","collector","tail","Context","view","parentContext","cache",".","parent","Writer","objectToString","Object","prototype","toString","Array","test","&","<",">","\"","'","/","`","=","match","index","substring","search","lookup","name","hasOwnProperty","names","context","lookupHit","indexOf","clearCache","parse","render","partials","renderTokens","originalTemplate","symbol","buffer","undefined","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","subRender","self","j","slice","escape","version","defaultWriter","TypeError","to_html","send","result","2","_interopRequireDefault","__esModule","default","_typeof","Symbol","iterator","constructor","_mustache","_mustache2","_Utils","_Utils2","_ApiUtils","_ApiUtils2","window","SocialFeed","destroy","facebookData","instagramData","twitterData","facebookContainer","instagramContainer","twitterContainer","defaults","facebook","instagram","twitter","facebookContainerClass","instagramContainerClass","twitterContainerClass","loadingContainerClass","loadingHtml","arguments","options","extend","init","document","querySelector","innerHTML","loadData","results","getFacebookView","getInstagramView","getTwitterView","facebookTemplate","getElementById","facebookCompiled","instagramTemplate","instagramCompiled","twitterTemplate","twitterCompiled","./utils/ApiUtils","./utils/Utils","3","ApiUtils","url","sendback","request","Request","method","headers","Headers","Content-Type","fetch","then","response","json","data","err","4","Utils","source","properties","property","toggleClass","ele","activeClass","classList","toggle","classes","className","existingIndex","splice","join","closest","el","clazz","parentNode"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,ICOA,SAAAK,EAAAC,GACA,gBAAAN,IAAAA,GAAA,gBAAAA,GAAAO,SACAD,EAAAN,GACA,kBAAAQ,SAAAA,OAAAC,IACAD,QAAA,WAAAF,IAEAD,EAAAK,YACAJ,EAAAD,EAAAK,YAEAC,KAAA,SAAAC,GAOA,QAAAC,GAAAC,GACA,MAAA,kBAAAA,GAOA,QAAAC,GAAAC,GACA,MAAAC,GAAAD,GAAA,cAAAA,GAGA,QAAAE,GAAAC,GACA,MAAAA,GAAAC,QAAA,8BAAA,QAOA,QAAAC,GAAAL,EAAAM,GACA,MAAA,OAAAN,GAAA,gBAAAA,IAAAM,IAAAN,GAMA,QAAAO,GAAAC,EAAAL,GACA,MAAAM,GAAAxB,KAAAuB,EAAAL,GAIA,QAAAO,GAAAP,GACA,OAAAI,EAAAI,EAAAR,GAcA,QAAAS,GAAAT,GACA,MAAAU,QAAAV,GAAAC,QAAA,eAAA,SAAA9B,GACA,MAAAwC,GAAAxC,KAgCA,QAAAyC,GAAAC,EAAAC,GAYA,QAAAC,KACA,GAAAC,IAAAC,EACA,KAAAC,EAAAnC,cACAoC,GAAAD,EAAAE,WAEAF,KAGAF,IAAA,EACAC,GAAA,EAIA,QAAAI,GAAAC,GAIA,GAHA,gBAAAA,KACAA,EAAAA,EAAAC,MAAAC,EAAA,KAEA1B,EAAAwB,IAAA,IAAAA,EAAAvC,OACA,KAAA,IAAAL,OAAA,iBAAA4C,EAEAG,GAAA,GAAAC,QAAA3B,EAAAuB,EAAA,IAAA,QACAK,EAAA,GAAAD,QAAA,OAAA3B,EAAAuB,EAAA,KACAM,EAAA,GAAAF,QAAA,OAAA3B,EAAA,IAAAuB,EAAA,KAjCA,IAAAT,EACA,QAEA,IAoBAY,GAAAE,EAAAC,EApBAC,KACAV,KACAD,KACAF,GAAA,EACAC,GAAA,CA6BAI,GAAAP,GAAArB,EAAAqB,KAKA,KAHA,GAEAgB,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAFAC,EAAA,GAAAC,GAAAxB,IAGAuB,EAAAE,OAAA,CAMA,GALAR,EAAAM,EAAAG,IAGAP,EAAAI,EAAAI,UAAAf,GAGA,IAAA,GAAAjD,GAAA,EAAAiE,EAAAT,EAAAjD,OAAA0D,EAAAjE,IAAAA,EACAyD,EAAAD,EAAAU,OAAAlE,GAEA+B,EAAA0B,GACAf,EAAAyB,KAAAxB,EAAApC,QAEAkC,GAAA,EAGAE,EAAAwB,MAAA,OAAAV,EAAAH,EAAAA,EAAA,IACAA,GAAA,EAGA,OAAAG,GACAlB,GAKA,KAAAqB,EAAAQ,KAAAnB,GACA,KAuBA,IArBAT,GAAA,EAGAe,EAAAK,EAAAQ,KAAAC,IAAA,OACAT,EAAAQ,KAAAE,GAGA,MAAAf,GACAC,EAAAI,EAAAI,UAAAO,GACAX,EAAAQ,KAAAG,GACAX,EAAAI,UAAAb,IACA,MAAAI,GACAC,EAAAI,EAAAI,UAAAZ,GACAQ,EAAAQ,KAAAI,GACAZ,EAAAI,UAAAb,GACAI,EAAA,KAEAC,EAAAI,EAAAI,UAAAb,IAIAS,EAAAQ,KAAAjB,GACA,KAAA,IAAAjD,OAAA,mBAAA0D,EAAAG,IAKA,IAHAL,GAAAH,EAAAC,EAAAF,EAAAM,EAAAG,KACApB,EAAAwB,KAAAT,GAEA,MAAAH,GAAA,MAAAA,EACAF,EAAAc,KAAAT,OACA,IAAA,MAAAH,EAAA,CAIA,GAFAI,EAAAN,EAAAT,OAEAe,EACA,KAAA,IAAAzD,OAAA,qBAAAsD,EAAA,QAAAF,EAEA,IAAAK,EAAA,KAAAH,EACA,KAAA,IAAAtD,OAAA,qBAAAyD,EAAA,GAAA,QAAAL,OACA,SAAAC,GAAA,MAAAA,GAAA,MAAAA,EACAd,GAAA,EACA,MAAAc,GAEAV,EAAAW,GAOA,GAFAG,EAAAN,EAAAT,MAGA,KAAA,IAAA1C,OAAA,qBAAAyD,EAAA,GAAA,QAAAC,EAAAG,IAEA,OAAAU,GAAAC,EAAA/B,IAOA,QAAA+B,GAAA/B,GAIA,IAAA,GADAe,GAAAiB,EAFAC,KAGA5E,EAAA,EAAA6E,EAAAlC,EAAApC,OAAAsE,EAAA7E,IAAAA,EACA0D,EAAAf,EAAA3C,GAEA0D,IACA,SAAAA,EAAA,IAAAiB,GAAA,SAAAA,EAAA,IACAA,EAAA,IAAAjB,EAAA,GACAiB,EAAA,GAAAjB,EAAA,KAEAkB,EAAAT,KAAAT,GACAiB,EAAAjB,GAKA,OAAAkB,GASA,QAAAH,GAAA9B,GAMA,IAAA,GADAe,GAAAoB,EAJAC,KACAC,EAAAD,EACA1B,KAGArD,EAAA,EAAA6E,EAAAlC,EAAApC,OAAAsE,EAAA7E,IAAAA,EAGA,OAFA0D,EAAAf,EAAA3C,GAEA0D,EAAA,IACA,IAAA,IACA,IAAA,IACAsB,EAAAb,KAAAT,GACAL,EAAAc,KAAAT,GACAsB,EAAAtB,EAAA,KACA,MACA,KAAA,IACAoB,EAAAzB,EAAAT,MACAkC,EAAA,GAAApB,EAAA,GACAsB,EAAA3B,EAAA9C,OAAA,EAAA8C,EAAAA,EAAA9C,OAAA,GAAA,GAAAwE,CACA,MACA,SACAC,EAAAb,KAAAT,GAIA,MAAAqB,GAOA,QAAAlB,GAAArC,GACAR,KAAAQ,OAAAA,EACAR,KAAAiE,KAAAzD,EACAR,KAAA+C,IAAA,EAyDA,QAAAmB,GAAAC,EAAAC,GACApE,KAAAmE,KAAAA,EACAnE,KAAAqE,OAAAC,IAAAtE,KAAAmE,MACAnE,KAAAuE,OAAAH,EAwEA,QAAAI,KACAxE,KAAAqE,SA5ZA,GAAAI,GAAAC,OAAAC,UAAAC,SACAtE,EAAAuE,MAAAvE,SAAA,SAAAH,GACA,MAAA,mBAAAsE,EAAAnF,KAAAa,IA6BAW,EAAAoB,OAAAyC,UAAAG,KAKA9D,EAAA,KAKAG,GACA4D,IAAA,QACAC,IAAA,OACAC,IAAA,OACAC,IAAA,SACAC,IAAA,QACAC,IAAA,SACAC,IAAA,SACAC,IAAA,UASAhC,EAAA,MACAtB,EAAA,MACAuB,EAAA,OACAC,EAAA,QACAH,EAAA,oBA+NAR,GAAA8B,UAAA7B,IAAA,WACA,MAAA,KAAA9C,KAAAiE,MAOApB,EAAA8B,UAAAvB,KAAA,SAAAvC,GACA,GAAA0E,GAAAvF,KAAAiE,KAAAsB,MAAA1E,EAEA,KAAA0E,GAAA,IAAAA,EAAAC,MACA,MAAA,EAEA,IAAAhF,GAAA+E,EAAA,EAKA,OAHAvF,MAAAiE,KAAAjE,KAAAiE,KAAAwB,UAAAjF,EAAAjB,QACAS,KAAA+C,KAAAvC,EAAAjB,OAEAiB,GAOAqC,EAAA8B,UAAA3B,UAAA,SAAAnC,GACA,GAAA0E,GAAAC,EAAAxF,KAAAiE,KAAAyB,OAAA7E,EAEA,QAAA2E,GACA,IAAA,GACAD,EAAAvF,KAAAiE,KACAjE,KAAAiE,KAAA,EACA,MACA,KAAA,GACAsB,EAAA,EACA,MACA,SACAA,EAAAvF,KAAAiE,KAAAwB,UAAA,EAAAD,GACAxF,KAAAiE,KAAAjE,KAAAiE,KAAAwB,UAAAD,GAKA,MAFAxF,MAAA+C,KAAAwC,EAAAhG,OAEAgG,GAiBArB,EAAAS,UAAAxB,KAAA,SAAAgB,GACA,MAAA,IAAAD,GAAAC,EAAAnE,OAOAkE,EAAAS,UAAAgB,OAAA,SAAAC,GACA,GAEApD,GAFA6B,EAAArE,KAAAqE,KAGA,IAAAA,EAAAwB,eAAAD,GACApD,EAAA6B,EAAAuB,OACA,CAGA,IAFA,GAAAE,GAAAN,EAAAO,EAAA/F,KAAAgG,GAAA,EAEAD,GAAA,CACA,GAAAH,EAAAK,QAAA,KAAA,EAgBA,IAfAzD,EAAAuD,EAAA5B,KACA2B,EAAAF,EAAA7D,MAAA,KACAyD,EAAA,EAaA,MAAAhD,GAAAgD,EAAAM,EAAAvG,QACAiG,IAAAM,EAAAvG,OAAA,IACAyG,EAAAtF,EAAA8B,EAAAsD,EAAAN,KAEAhD,EAAAA,EAAAsD,EAAAN,UAGAhD,GAAAuD,EAAA5B,KAAAyB,GACAI,EAAAtF,EAAAqF,EAAA5B,KAAAyB,EAGA,IAAAI,EACA,KAEAD,GAAAA,EAAAxB,OAGAF,EAAAuB,GAAApD,EAMA,MAHAtC,GAAAsC,KACAA,EAAAA,EAAAlD,KAAAU,KAAAmE,OAEA3B,GAeAgC,EAAAG,UAAAuB,WAAA,WACAlG,KAAAqE,UAOAG,EAAAG,UAAAwB,MAAA,SAAA9E,EAAAC,GACA,GAAA+C,GAAArE,KAAAqE,MACA1C,EAAA0C,EAAAhD,EAKA,OAHA,OAAAM,IACAA,EAAA0C,EAAAhD,GAAAD,EAAAC,EAAAC,IAEAK,GAYA6C,EAAAG,UAAAyB,OAAA,SAAA/E,EAAA8C,EAAAkC,GACA,GAAA1E,GAAA3B,KAAAmG,MAAA9E,GACA0E,EAAA5B,YAAAD,GAAAC,EAAA,GAAAD,GAAAC,EACA,OAAAnE,MAAAsG,aAAA3E,EAAAoE,EAAAM,EAAAhF,IAYAmD,EAAAG,UAAA2B,aAAA,SAAA3E,EAAAoE,EAAAM,EAAAE,GAIA,IAAA,GADA7D,GAAA8D,EAAAhE,EAFAiE,EAAA,GAGAzH,EAAA,EAAA6E,EAAAlC,EAAApC,OAAAsE,EAAA7E,IAAAA,EACAwD,EAAAkE,OACAhE,EAAAf,EAAA3C,GACAwH,EAAA9D,EAAA,GAEA,MAAA8D,EAAAhE,EAAAxC,KAAA2G,cAAAjE,EAAAqD,EAAAM,EAAAE,GACA,MAAAC,EAAAhE,EAAAxC,KAAA4G,eAAAlE,EAAAqD,EAAAM,EAAAE,GACA,MAAAC,EAAAhE,EAAAxC,KAAA6G,cAAAnE,EAAAqD,EAAAM,EAAAE,GACA,MAAAC,EAAAhE,EAAAxC,KAAA8G,eAAApE,EAAAqD,GACA,SAAAS,EAAAhE,EAAAxC,KAAA+G,aAAArE,EAAAqD,GACA,SAAAS,IAAAhE,EAAAxC,KAAAgH,SAAAtE,IAEAgE,SAAAlE,IACAiE,GAAAjE,EAGA,OAAAiE,IAGAjC,EAAAG,UAAAgC,cAAA,SAAAjE,EAAAqD,EAAAM,EAAAE,GAOA,QAAAU,GAAA5F,GACA,MAAA6F,GAAAd,OAAA/E,EAAA0E,EAAAM,GAPA,GAAAa,GAAAlH,KACAyG,EAAA,GACAjE,EAAAuD,EAAAJ,OAAAjD,EAAA,GAQA,IAAAF,EAAA,CAEA,GAAAlC,EAAAkC,GACA,IAAA,GAAA2E,GAAA,EAAAlE,EAAAT,EAAAjD,OAAA0D,EAAAkE,IAAAA,EACAV,GAAAzG,KAAAsG,aAAA5D,EAAA,GAAAqD,EAAA5C,KAAAX,EAAA2E,IAAAd,EAAAE,OAEA,IAAA,gBAAA/D,IAAA,gBAAAA,IAAA,gBAAAA,GACAiE,GAAAzG,KAAAsG,aAAA5D,EAAA,GAAAqD,EAAA5C,KAAAX,GAAA6D,EAAAE,OACA,IAAArG,EAAAsC,GAAA,CACA,GAAA,gBAAA+D,GACA,KAAA,IAAArH,OAAA,iEAGAsD,GAAAA,EAAAlD,KAAAyG,EAAA5B,KAAAoC,EAAAa,MAAA1E,EAAA,GAAAA,EAAA,IAAAuE,GAEA,MAAAzE,IACAiE,GAAAjE,OAEAiE,IAAAzG,KAAAsG,aAAA5D,EAAA,GAAAqD,EAAAM,EAAAE,EAEA,OAAAE,KAGAjC,EAAAG,UAAAiC,eAAA,SAAAlE,EAAAqD,EAAAM,EAAAE,GACA,GAAA/D,GAAAuD,EAAAJ,OAAAjD,EAAA,GAIA,QAAAF,GAAAlC,EAAAkC,IAAA,IAAAA,EAAAjD,OACAS,KAAAsG,aAAA5D,EAAA,GAAAqD,EAAAM,EAAAE,GADA,QAIA/B,EAAAG,UAAAkC,cAAA,SAAAnE,EAAAqD,EAAAM,GACA,GAAAA,EAAA,CAEA,GAAA7D,GAAAtC,EAAAmG,GAAAA,EAAA3D,EAAA,IAAA2D,EAAA3D,EAAA,GACA,OAAA,OAAAF,EACAxC,KAAAsG,aAAAtG,KAAAmG,MAAA3D,GAAAuD,EAAAM,EAAA7D,GADA,SAIAgC,EAAAG,UAAAmC,eAAA,SAAApE,EAAAqD,GACA,GAAAvD,GAAAuD,EAAAJ,OAAAjD,EAAA,GACA,OAAA,OAAAF,EACAA,EADA,QAIAgC,EAAAG,UAAAoC,aAAA,SAAArE,EAAAqD,GACA,GAAAvD,GAAAuD,EAAAJ,OAAAjD,EAAA,GACA,OAAA,OAAAF,EACAvC,EAAAoH,OAAA7E,GADA,QAIAgC,EAAAG,UAAAqC,SAAA,SAAAtE,GACA,MAAAA,GAAA,IAGAzC,EAAA2F,KAAA,cACA3F,EAAAqH,QAAA,QACArH,EAAAqB,MAAA,KAAA,KAGA,IAAAiG,GAAA,GAAA/C,EAKAvE,GAAAiG,WAAA,WACA,MAAAqB,GAAArB,cAQAjG,EAAAkG,MAAA,SAAA9E,EAAAC,GACA,MAAAiG,GAAApB,MAAA9E,EAAAC,IAOArB,EAAAmG,OAAA,SAAA/E,EAAA8C,EAAAkC,GACA,GAAA,gBAAAhF,GACA,KAAA,IAAAmG,WAAA,wDACApH,EAAAiB,GAAA,kFAIA,OAAAkG,GAAAnB,OAAA/E,EAAA8C,EAAAkC,IAKApG,EAAAwH,QAAA,SAAApG,EAAA8C,EAAAkC,EAAAqB,GAGA,GAAAC,GAAA1H,EAAAmG,OAAA/E,EAAA8C,EAAAkC,EAEA,OAAAnG,GAAAwH,OACAA,GAAAC,GAEAA,GAMA1H,EAAAoH,OAAApG,EAGAhB,EAAA4C,QAAAA,EACA5C,EAAAiE,QAAAA,EACAjE,EAAAuE,OAAAA,SCKMoD,GAAG,SAAS7I,EAAQU,EAAOJ,GACjC,YAgBA,SAASwI,GAAuBxH,GAAO,MAAOA,IAAOA,EAAIyH,WAAazH,GAAQ0H,UAAS1H,GAdvF,GAAI2H,GAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAU7H,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAX4H,SAAyB5H,EAAI8H,cAAgBF,OAAS,eAAkB5H,IC1nB1O+H,EAAArJ,EAAA,YD8nBIsJ,EAAaR,EAAuBO,GC5nBxCE,EAAAvJ,EAAA,iBDgoBIwJ,EAAUV,EAAuBS,GC/nBrCE,EAAAzJ,EAAA,oBDmoBI0J,EAAaZ,EAAuBW,ICjoBxC,SAAWE,GAIP,GAAIC,GAAa,WACbC,EAAQtJ,KAAKU,MAEbA,KAAK6I,gBACL7I,KAAK8I,iBACL9I,KAAK+I,eAEL/I,KAAKgJ,kBAAoB,KACzBhJ,KAAKiJ,mBAAqB,KAC1BjJ,KAAKkJ,iBAAmB,IAExB,IAAIC,IACAC,SAAU,IACVC,UAAW,IACXC,QAAS,IACTC,uBAAwB,kCACxBC,wBAAyB,mCACzBC,sBAAuB,iCACvBC,sBAAuB,uBACvBC,YAAa,UAGbC,WAAU,IAA8B,WAAxB5B,EAAO4B,UAAU,MACjC5J,KAAK6J,QAAUtB,EAAAA,WAAMuB,OAAOX,EAAUS,UAAU,KAGpDG,EAAKzK,KAAKU,OAOV4I,EAAU,WACL5I,KAAK6J,UAEV7J,KAAK6J,QAAU,OAOfE,EAAO,SAAUF,GACjB,GAAM3C,GAAOlH,IAEiB,OAA1BA,KAAK6J,QAAQT,WACbpJ,KAAKgJ,kBAAoBgB,SAASC,cAAcjK,KAAK6J,QAAQN,wBAC7DvJ,KAAKgJ,kBAAkBiB,cAAcjK,KAAK6J,QAAQH,uBAAuBQ,UAAYlK,KAAK6J,QAAQF,YAElGlB,EAAAA,WAAS0B,SAAS,sCAAuC,SAAUC,GAC/DlD,EAAK2B,aAAeuB,EACpBC,EAAgB/K,KAAK4H,MAIE,MAA3BlH,KAAK6J,QAAQR,YACbrJ,KAAKiJ,mBAAqBe,SAASC,cAAcjK,KAAK6J,QAAQL,yBAC9DxJ,KAAKiJ,mBAAmBgB,cAAcjK,KAAK6J,QAAQH,uBAAuBQ,UAAYlK,KAAK6J,QAAQF,YAEnGlB,EAAAA,WAAS0B,SAAS,uCAAwC,SAAUC,GAChElD,EAAK4B,cAAgBsB,EACrBE,EAAiBhL,KAAK4H,MAID,MAAzBlH,KAAK6J,QAAQP,UACbtJ,KAAKkJ,iBAAmBc,SAASC,cAAcjK,KAAK6J,QAAQJ,uBAC5DzJ,KAAKkJ,iBAAiBe,cAAcjK,KAAK6J,QAAQH,uBAAuBQ,UAAYlK,KAAK6J,QAAQF,YAEjGlB,EAAAA,WAAS0B,SAAS,qCAAsC,SAAUC,GAC9DlD,EAAK6B,YAAcqB,EACnBG,EAAejL,KAAK4H,OAS5BmD,EAAkB,WAClB,GAAIG,GAAmBR,SAASS,eAAe,wBAAwBP,SACvE7B,GAAAA,WAASlC,MAAMqE,EACf,IAAIE,GAAmBrC,EAAAA,WAASjC,OAAOoE,EAAkBxK,KAAK6I,aAC9D7I,MAAKgJ,kBAAkBkB,UAAYQ,GAOnCJ,EAAmB,WACnB,GAAIK,GAAoBX,SAASS,eAAe,yBAAyBP,SACzE7B,GAAAA,WAASlC,MAAMwE,EACf,IAAIC,GAAoBvC,EAAAA,WAASjC,OAAOuE,EAAmB3K,KAAK8I,cAChE9I,MAAKiJ,mBAAmBiB,UAAYU,GAOpCL,EAAiB,WACjB,GAAIM,GAAkBb,SAASS,eAAe,uBAAuBP,SACrE7B,GAAAA,WAASlC,MAAM0E,EACf,IAAIC,GAAkBzC,EAAAA,WAASjC,OAAOyE,EAAiB7K,KAAK+I,YAC5D/I,MAAKkJ,iBAAiBgB,UAAYY,EAItCpC,GAAOC,WAAaA,GAErBD,UDsoBAqC,mBAAmB,EAAEC,gBAAgB,EAAE/K,SAAW,IAAIgL,GAAG,SAASlM,EAAQU,EAAOJ,GEhwBpF,YAEA,IAAI6L,KAEJA,GAASf,SAAW,SAAUgB,EAAKC,GAC/B,GAAIC,GAAU,GAAIC,SAAQH,GACtBI,OAAQ,MACRC,QAAS,GAAIC,UACTC,eAAgB,sBAIxBC,OAAMN,GAASO,KAAK,SAACC,GACjB,MAAOA,GAASC,SACjBF,KAAK,SAACG,GACLX,EAASW,KAHbJ,SAIS,SAACK,GACN,KAAM,IAAI9M,OAAM8M,MAIxBvM,EAAOJ,QAAU6L,OFmwBXe,GAAG,SAASlN,EAAQU,EAAOJ,GACjC,YGzxBA,IAAI6M,KAEJA,GAAMpC,OAAS,SAAUqC,EAAQC,GAC7B,GAAIC,EACJ,KAAKA,IAAYD,GACTA,EAAWvG,eAAewG,KAC1BF,EAAOE,GAAYD,EAAWC,GAGtC,OAAOF,IAGXD,EAAMI,YAAc,SAAUC,EAAKC,GAC/B,GAAID,EAAIE,UACJF,EAAIE,UAAUC,OAAOF,OAClB,CACH,GAAIG,GAAUJ,EAAIK,UAAU7K,MAAM,KAC9B8K,EAAgBF,EAAQ1G,QAAQuG,EAEhCK,IAAiB,EACjBF,EAAQG,OAAOD,EAAe,GAE9BF,EAAQxJ,KAAKqJ,GAGjBD,EAAIK,UAAYD,EAAQI,KAAK,OAIrCb,EAAMc,QAAU,SAAUC,EAAIC,GAC1B,KAAOD,EAAGL,YAAcM,GAEpB,GADAD,EAAKA,EAAGE,YACHF,EACD,MAAO,KAGf,OAAOA,IAGXxN,EAAOJ,QAAU6M,YH6xBN","file":"socialfeed.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.2.1';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n}));\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.2.1';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n}));\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _mustache = require('mustache');\n\nvar _mustache2 = _interopRequireDefault(_mustache);\n\nvar _Utils = require('./utils/Utils');\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _ApiUtils = require('./utils/ApiUtils');\n\nvar _ApiUtils2 = _interopRequireDefault(_ApiUtils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function (window) {\n\n    'use strict';\n\n    var SocialFeed = function SocialFeed() {\n        destroy.call(this);\n\n        this.facebookData = [];\n        this.instagramData = [];\n        this.twitterData = [];\n\n        this.facebookContainer = null;\n        this.instagramContainer = null;\n        this.twitterContainer = null;\n\n        var defaults = {\n            facebook: '0',\n            instagram: '0',\n            twitter: '0',\n            facebookContainerClass: '.socialFeeds-facebook-container',\n            instagramContainerClass: '.socialFeeds-instagram-container',\n            twitterContainerClass: '.socialFeeds-twitter-container',\n            loadingContainerClass: '.socialFeeds-loading',\n            loadingHtml: 'LOADING'\n        };\n\n        if (arguments[0] && _typeof(arguments[0]) === 'object') {\n            this.options = _Utils2.default.extend(defaults, arguments[0]);\n        }\n\n        init.call(this);\n    };\n\n    /**\n     * Destory instance of plugin\n     * @private\n     */\n    var destroy = function destroy() {\n        if (!this.options) return;\n\n        this.options = null;\n    };\n\n    /**\n     * Init Plugin\n     * @private\n     */\n    var init = function init(options) {\n        var self = this;\n\n        if (this.options.facebook === '1') {\n            this.facebookContainer = document.querySelector(this.options.facebookContainerClass);\n            this.facebookContainer.querySelector(this.options.loadingContainerClass).innerHTML = this.options.loadingHtml;\n\n            _ApiUtils2.default.loadData('api/craft/socialfeedplugin/facebook', function (results) {\n                self.facebookData = results;\n                getFacebookView.call(self);\n            });\n        }\n\n        if (this.options.instagram === '1') {\n            this.instagramContainer = document.querySelector(this.options.instagramContainerClass);\n            this.instagramContainer.querySelector(this.options.loadingContainerClass).innerHTML = this.options.loadingHtml;\n\n            _ApiUtils2.default.loadData('api/craft/socialfeedplugin/instagram', function (results) {\n                self.instagramData = results;\n                getInstagramView.call(self);\n            });\n        }\n\n        if (this.options.twitter === '1') {\n            this.twitterContainer = document.querySelector(this.options.twitterContainerClass);\n            this.twitterContainer.querySelector(this.options.loadingContainerClass).innerHTML = this.options.loadingHtml;\n\n            _ApiUtils2.default.loadData('api/craft/socialfeedplugin/twitter', function (results) {\n                self.twitterData = results;\n                getTwitterView.call(self);\n            });\n        }\n    };\n\n    /**\n     * Get Facebook View\n     * @private\n     */\n    var getFacebookView = function getFacebookView() {\n        var facebookTemplate = document.getElementById('socialFeeds-facebook').innerHTML;\n        _mustache2.default.parse(facebookTemplate);\n        var facebookCompiled = _mustache2.default.render(facebookTemplate, this.facebookData);\n        this.facebookContainer.innerHTML = facebookCompiled;\n    };\n\n    /**\n     * Get Instagram View\n     * @private\n     */\n    var getInstagramView = function getInstagramView() {\n        var instagramTemplate = document.getElementById('socialFeeds-instagram').innerHTML;\n        _mustache2.default.parse(instagramTemplate);\n        var instagramCompiled = _mustache2.default.render(instagramTemplate, this.instagramData);\n        this.instagramContainer.innerHTML = instagramCompiled;\n    };\n\n    /**\n     * Get Twitter View\n     * @private\n     */\n    var getTwitterView = function getTwitterView() {\n        var twitterTemplate = document.getElementById('socialFeeds-twitter').innerHTML;\n        _mustache2.default.parse(twitterTemplate);\n        var twitterCompiled = _mustache2.default.render(twitterTemplate, this.twitterData);\n        this.twitterContainer.innerHTML = twitterCompiled;\n    };\n\n    // load it\n    window.SocialFeed = SocialFeed;\n})(window);\n\n},{\"./utils/ApiUtils\":3,\"./utils/Utils\":4,\"mustache\":1}],3:[function(require,module,exports){\n'use strict';\n\nvar ApiUtils = {};\n\nApiUtils.loadData = function (url, sendback) {\n    var request = new Request(url, {\n        method: 'GET',\n        headers: new Headers({\n            'Content-Type': 'application/json'\n        })\n    });\n\n    fetch(request).then(function (response) {\n        return response.json();\n    }).then(function (data) {\n        sendback(data);\n    }).catch(function (err) {\n        throw new Error(err);\n    });\n};\n\nmodule.exports = ApiUtils;\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nvar Utils = {};\n\nUtils.extend = function (source, properties) {\n    var property;\n    for (property in properties) {\n        if (properties.hasOwnProperty(property)) {\n            source[property] = properties[property];\n        }\n    }\n    return source;\n};\n\nUtils.toggleClass = function (ele, activeClass) {\n    if (ele.classList) {\n        ele.classList.toggle(activeClass);\n    } else {\n        var classes = ele.className.split(' ');\n        var existingIndex = classes.indexOf(activeClass);\n\n        if (existingIndex >= 0) {\n            classes.splice(existingIndex, 1);\n        } else {\n            classes.push(activeClass);\n        }\n\n        ele.className = classes.join(' ');\n    }\n};\n\nUtils.closest = function (el, clazz) {\n    while (el.className !== clazz) {\n        el = el.parentNode;\n        if (!el) {\n            return null;\n        }\n    }\n    return el;\n};\n\nmodule.exports = Utils;\n\n},{}]},{},[2])\n\n","import Mustache from 'mustache';\n\nimport Utils from './utils/Utils';\nimport ApiUtils from './utils/ApiUtils';\n\n(function (window) {\n\n    'use strict';\n\n    var SocialFeed = function () {\n        destroy.call(this);\n\n        this.facebookData = [];\n        this.instagramData = [];\n        this.twitterData = [];\n\n        this.facebookContainer = null;\n        this.instagramContainer = null;\n        this.twitterContainer = null;\n\n        var defaults = {\n            facebook: '0',\n            instagram: '0',\n            twitter: '0',\n            facebookContainerClass: '.socialFeeds-facebook-container',\n            instagramContainerClass: '.socialFeeds-instagram-container',\n            twitterContainerClass: '.socialFeeds-twitter-container',\n            loadingContainerClass: '.socialFeeds-loading',\n            loadingHtml: 'LOADING'\n        };\n\n        if (arguments[0] && typeof arguments[0] === 'object') {\n            this.options = Utils.extend(defaults, arguments[0]);\n        }\n\n        init.call(this);\n    };\n\n    /**\n     * Destory instance of plugin\n     * @private\n     */\n    var destroy = function () {\n        if (!this.options) return;\n\n        this.options = null;\n    };\n\n    /**\n     * Init Plugin\n     * @private\n     */\n    var init = function (options) {\n        const self = this;\n\n        if (this.options.facebook === '1') {\n            this.facebookContainer = document.querySelector(this.options.facebookContainerClass);\n            this.facebookContainer.querySelector(this.options.loadingContainerClass).innerHTML = this.options.loadingHtml;\n\n            ApiUtils.loadData('api/craft/socialfeedplugin/facebook', function (results) {\n                self.facebookData = results;\n                getFacebookView.call(self);\n            });\n        }\n\n        if (this.options.instagram === '1') {\n            this.instagramContainer = document.querySelector(this.options.instagramContainerClass);\n            this.instagramContainer.querySelector(this.options.loadingContainerClass).innerHTML = this.options.loadingHtml;\n\n            ApiUtils.loadData('api/craft/socialfeedplugin/instagram', function (results) {\n                self.instagramData = results;\n                getInstagramView.call(self);\n            });\n        }\n\n        if (this.options.twitter === '1') {\n            this.twitterContainer = document.querySelector(this.options.twitterContainerClass);\n            this.twitterContainer.querySelector(this.options.loadingContainerClass).innerHTML = this.options.loadingHtml;\n\n            ApiUtils.loadData('api/craft/socialfeedplugin/twitter', function (results) {\n                self.twitterData = results;\n                getTwitterView.call(self);\n            });\n        }\n    };\n\n    /**\n     * Get Facebook View\n     * @private\n     */\n    var getFacebookView = function () {\n        var facebookTemplate = document.getElementById('socialFeeds-facebook').innerHTML;\n        Mustache.parse(facebookTemplate);\n        var facebookCompiled = Mustache.render(facebookTemplate, this.facebookData);\n        this.facebookContainer.innerHTML = facebookCompiled;\n    };\n\n    /**\n     * Get Instagram View\n     * @private\n     */\n    var getInstagramView = function () {\n        var instagramTemplate = document.getElementById('socialFeeds-instagram').innerHTML;\n        Mustache.parse(instagramTemplate);\n        var instagramCompiled = Mustache.render(instagramTemplate, this.instagramData);\n        this.instagramContainer.innerHTML = instagramCompiled;\n    };\n\n    /**\n     * Get Twitter View\n     * @private\n     */\n    var getTwitterView = function () {\n        var twitterTemplate = document.getElementById('socialFeeds-twitter').innerHTML;\n        Mustache.parse(twitterTemplate);\n        var twitterCompiled = Mustache.render(twitterTemplate, this.twitterData);\n        this.twitterContainer.innerHTML = twitterCompiled;\n    };\n\n    // load it\n    window.SocialFeed = SocialFeed;\n\n})(window);\n","'use strict';\n\nvar ApiUtils = {};\n\nApiUtils.loadData = function (url, sendback) {\n    var request = new Request(url, {\n        method: 'GET',\n        headers: new Headers({\n            'Content-Type': 'application/json'\n        })\n    });\n\n    fetch(request).then((response) => {\n        return response.json();\n    }).then((data) => {\n        sendback(data);\n    }).catch((err) => {\n        throw new Error(err);\n    });\n};\n\nmodule.exports = ApiUtils;\n","var Utils = {};\n\nUtils.extend = function (source, properties) {\n    var property;\n    for (property in properties) {\n        if (properties.hasOwnProperty(property)) {\n            source[property] = properties[property];\n        }\n    }\n    return source;\n};\n\nUtils.toggleClass = function (ele, activeClass) {\n    if (ele.classList) {\n        ele.classList.toggle(activeClass);\n    } else {\n        var classes = ele.className.split(' ');\n        var existingIndex = classes.indexOf(activeClass);\n\n        if (existingIndex >= 0) {\n            classes.splice(existingIndex, 1);\n        } else {\n            classes.push(activeClass);\n        }\n\n        ele.className = classes.join(' ');\n    }\n};\n\nUtils.closest = function (el, clazz) {\n    while (el.className !== clazz) {\n        el = el.parentNode;\n        if (!el) {\n            return null;\n        }\n    }\n    return el;\n};\n\nmodule.exports = Utils;\n"],"sourceRoot":"/source/"}